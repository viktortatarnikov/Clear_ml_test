
import os
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, ParameterSampler
from catboost import CatBoostClassifier, Pool
from sklearn.metrics import roc_auc_score
from clearml import Task, Logger


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ClearML
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ ClearML —Å–µ—Ä–≤–µ—Ä—É


'''
–ü–æ—Å–ª–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É 
clearml-init

–ü–æ—Å–ª–µ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≥–µ–Ω–µ–Ω—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á API Credentials –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

api {
  # Viktor Tatarnikov's workspace
  web_server: https://app.clear.ml/
  api_server: https://api.clear.ml
  files_server: https://files.clear.ml
  credentials {
    "access_key" = "YOUR_ACCESS_KEY"
    "secret_key" = "YOUR_SECRET_KEY"
  }
}'''


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ClearML –∑–∞–¥–∞—á–∏
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ClearML –∑–∞–¥–∞—á–∏...")
task = Task.init(project_name='Titanic_CatBoost_Demo',
           task_name='CatBoost_Classification_v1',
           tags=['Model:CatBoost', 'Dataset:Titanic', 'Type:Classification'])


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
print("\n–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ Titanic...")
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª titanic.csv –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
df_raw = pd.read_csv('titanic.csv')

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ ClearML
task.upload_artifact(name='data.raw', artifact_object=df_raw)

print(f"–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {df_raw.shape}")
print("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
print(df_raw.head())


# –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
task.upload_artifact(name='eda.describe', artifact_object=df_raw.describe())
print(df_raw.describe())


# –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
print("\n–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π...")
target_distribution = df_raw['Survived'].value_counts(normalize=True).reset_index()
task.upload_artifact(name='target.distribution', artifact_object=target_distribution)

print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:")
print(target_distribution)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
plt.figure(figsize=(8, 6))
sns.countplot(data=df_raw, x='Survived')
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤')
plt.xlabel('–í—ã–∂–∏–ª (1) / –ù–µ –≤—ã–∂–∏–ª (0)')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.show()


# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
print("\n–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
# –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–µ—Å—É—Ç –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
df_preproc = df_raw.drop(columns=['PassengerId', 'Name', 'Ticket'])

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø
# CatBoost –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Ö –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ
for col in ['Sex', 'Cabin', 'Embarked']:
    df_preproc[col] = df_preproc[col].astype(str)
    
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
task.upload_artifact(name='data.preprocessed', artifact_object=df_preproc)

print(f"–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {df_preproc.shape}")
print("\n–ö–æ–ª–æ–Ω–∫–∏:")
print(df_preproc.columns.tolist())


# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
print("\n–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏...")
# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é (67%) –∏ —Ç–µ—Å—Ç–æ–≤—É—é (33%) –≤—ã–±–æ—Ä–∫–∏
train, test = train_test_split(df_preproc, test_size=0.33, random_state=42)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
task.upload_artifact(name='data.train', artifact_object=train)
task.upload_artifact(name='data.test', artifact_object=test)

print(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: {train.shape}")
print(f"–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {test.shape}")


# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
print("\n–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏...")
# –í—ã–¥–µ–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏
X_train = train.drop(columns=['Survived']) 
X_train = X_train[['Sex', 'Cabin', 'Embarked']]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
y_train = train['Survived']

# –í—ã–¥–µ–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏
X_test = test.drop(columns=['Survived']) 
X_test = X_test[['Sex', 'Cabin', 'Embarked']]
y_test = test['Survived']

print(f"X_train shape: {X_train.shape}")
print(f"y_train shape: {y_train.shape}")
print(f"X_test shape: {X_test.shape}")
print(f"y_test shape: {y_test.shape}")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
print("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
# –°–µ—Ç–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
param_grid = {
    'depth' : [4, 5, 6, 7, 8, 10, 16],        # –ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞
    'learning_rate': [0.1, 0.05, 0.01, 0.0005, 0.0001],  # –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
    'iterations': [30, 50, 100, 150, 200]     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫
log = Logger.current_logger()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
best_score = 0 
best_model = None
iteration = 0

print(f"–ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ 4 —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ {len(param_grid['depth']) * len(param_grid['learning_rate']) * len(param_grid['iterations'])} –≤–æ–∑–º–æ–∂–Ω—ã—Ö")


# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏ –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
print("\n–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏ –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
# –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
for param in ParameterSampler(param_grid, n_iter=4, random_state=42):
    print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {param}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∑–∞–¥–∞—á–µ ClearML –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    parametrs_dict = Task.current_task().connect(param)
    
    # –°–æ–∑–¥–∞—ë–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å CatBoost
    model = CatBoostClassifier(**param, silent=True)
    # –í–ê–ñ–ù–û: –æ–±—É—á–∞–µ–º –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!
    model.fit(X_train, y_train, cat_features=['Sex', 'Cabin', 'Embarked'])
    
    # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
    test_scores = model.eval_metrics(
        data=Pool(X_test, y_test, cat_features=['Sex', 'Cabin', 'Embarked']),
        metrics=['Logloss', 'AUC'])
    test_logloss = round(test_scores['Logloss'][-1], 4)
    test_roc_auc = round(test_scores['AUC'][-1]*100, 4)
    
    # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ (–¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è)
    train_scores = model.eval_metrics(
        data=Pool(X_train, y_train, cat_features=['Sex', 'Cabin', 'Embarked']),
        metrics=['Logloss', 'AUC'])
    train_logloss = round(train_scores['Logloss'][-1], 4)
    train_roc_auc = round(train_scores['AUC'][-1]*100, 4)
    
    print(f"–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞ - Logloss: {test_logloss}, ROC AUC: {test_roc_auc}%")
    print(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ - Logloss: {train_logloss}, ROC AUC: {train_roc_auc}%")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
    if test_roc_auc > best_score:
        best_score = test_roc_auc
        best_model = model
        
        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ ClearML
        log.report_scalar('Logloss', 'Test', iteration=iteration, value=test_logloss)
        log.report_scalar('Logloss', 'Train', iteration=iteration, value=train_logloss)
        
        log.report_scalar('ROC AUC', 'Test', iteration=iteration, value=test_roc_auc)
        log.report_scalar('ROC AUC', 'Train', iteration=iteration, value=train_roc_auc)
        
        iteration += 1
        print(f"üéâ –ù–æ–≤–∞—è –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å! ROC AUC: {best_score}%")


# –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
print("\n–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
# –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ ClearML
log.report_single_value(name='Best ROC AUC', value=best_score)
log.report_single_value(name='Best Logloss', value=test_logloss)
log.report_single_value(name='Train Rows', value=X_train.shape[0])
log.report_single_value(name='Test Rows', value=X_test.shape[0])
log.report_single_value(name='Features', value=X_train.shape[1])

print(f"\n –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ROC AUC = {best_score}%")
print(f" –†–∞–∑–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏: {X_train.shape[0]} —Å—Ç—Ä–æ–∫")
print(f" –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏: {X_test.shape[0]} —Å—Ç—Ä–æ–∫")
print(f" –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {X_train.shape[1]}")


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
print("\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏...")
best_model_name = 'best_catboost_model.cbn'
best_model.save_model(best_model_name)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ ClearML
task.upload_artifact(name=best_model_name, artifact_object=best_model)

print(f"–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ '{best_model_name}'")


# –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏ ClearML
print("\n–ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏ ClearML...")
task.close()

print("–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ ClearML –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.")


"""
–ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é CatBoost —Å ClearML –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫, –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
3. –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é ParameterSampler
4. –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ train/test

–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ ClearML –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.

–û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–¥–µ:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±—ã–ª–æ X_test, —Å—Ç–∞–ª–æ X_train)
- –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–∞–∂–¥–æ–º—É –±–ª–æ–∫—É –∫–æ–¥–∞
- –£–ª—É—á—à–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞
- –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ print-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""

